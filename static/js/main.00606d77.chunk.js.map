{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","classNames","completed","TodoList","todos","map","getUser","userId","usersFromServer","find","maxTodosId","sort","a","b","App","useState","setUserId","setTitle","isValidTitle","setIsValidTitle","isValidUser","setIsValidUser","action","method","onSubmit","event","preventDefault","trim","newTodo","push","makeNewTodo","type","placeholder","value","onChange","target","defaultValue","disabled","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,uBCpDEC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCJ,EAEEI,EAFFJ,KACAE,EACEE,EADFF,MAGF,OACE,mCACE,mBAAGG,UAAU,WAAWC,KAAI,iBAAYJ,GAAxC,SACGF,OCJIO,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCC,EAEED,EAFFC,MACAL,EACEI,EADFJ,KAGF,OACE,0BACEC,UACEK,IACE,WACA,CACE,sBAAuBF,EAAKG,YALpC,UAUE,oBAAIN,UAAU,kBAAd,SAAiCI,IAChCL,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QCrBlBQ,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASR,UAAU,WAAnB,SACGQ,EAAMC,KAAI,SAACN,GAAD,OACT,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKT,UCH5B,SAASgB,EAAQC,GAIf,OAHkBC,EAAgBC,MAAK,SAAAd,GAAI,OAAIA,EAAKL,KAAOiB,MAGvC,KAGf,IAAMH,ECjBE,CACb,CACEd,GAAI,EACJU,MAAO,qBACPE,WAAW,EACXK,OAAQ,GAEV,CACEjB,GAAI,GACJU,MAAO,qBACPE,WAAW,EACXK,OAAQ,GAEV,CACEjB,GAAI,EACJU,MAAO,qCACPE,WAAW,EACXK,OAAQ,IDAiCF,KAAI,SAAAN,GAAI,kCAChDA,GADgD,IAEnDJ,KAAMW,EAAQP,EAAKQ,aAGfG,EAAa,YAAIN,GAAOO,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEvB,GAAKsB,EAAEtB,MAAI,GAAGA,GAEhDwB,EAAgB,WAC3B,MAA4BC,mBAAS,GAArC,mBAAOR,EAAP,KAAeS,EAAf,KACA,EAA0BD,mBAAS,IAAnC,mBAAOf,EAAP,KAAciB,EAAd,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KA+CA,OACE,sBAAKzB,UAAU,MAAf,UACE,+CAEA,uBACE0B,OAAO,aACPC,OAAO,OACPC,SA9Be,SAACC,GACpBA,EAAMC,iBAEDnB,GACHc,GAAe,GAGZrB,EAAM2B,QACTR,GAAgB,GAGbZ,GAAWP,EAAM2B,UAjCJ,WAClB,IAAMC,EAAU,CACdtC,GAAIoB,EAAa,EACjBV,QACAE,WAAW,EACXK,SACAZ,KAAMW,EAAQC,IAGhBH,EAAMyB,KAAKD,GA4BXE,GAEAd,EAAU,GACVC,EAAS,IACTE,GAAgB,GAChBE,GAAe,KAOb,UAKE,sBAAKzB,UAAU,QAAf,UACE,uBACEmC,KAAK,OACL,UAAQ,aACRC,YAAY,gBACZC,MAAOjC,EACPkC,SAhDgB,SAACT,GACzBR,EAASQ,EAAMU,OAAOF,OACtBd,GAAgB,MAgDTD,GAAgB,sBAAMtB,UAAU,QAAhB,qCAGnB,sBAAKA,UAAU,QAAf,UACE,yBACE,UAAQ,aACRwC,aAAc7B,EACd0B,MAAO1B,EACP2B,SArDiB,SAACT,GAC1BT,GAAWS,EAAMU,OAAOF,OACxBZ,GAAe,IA+CT,UAME,wBAAQY,MAAM,IAAII,UAAQ,EAA1B,2BAEC7B,EAAgBH,KAAI,gBAAGd,EAAH,EAAGA,KAAMD,EAAT,EAASA,GAAT,OACnB,wBAAQ2C,MAAO3C,EAAf,SAA6BC,GAALD,SAI3B8B,GAAe,sBAAMxB,UAAU,QAAhB,qCAGlB,wBAAQmC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAU3B,MAAOA,QElHvBkC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.00606d77.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <>\n      <a className=\"UserInfo\" href={`mailto:${email}`}>\n        {name}\n      </a>\n    </>\n  );\n};\n","import React from 'react';\n\nimport classNames from 'classnames';\n\nimport { UserInfo } from '../UserInfo/UserInfo';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      className={\n        classNames(\n          'TodoInfo',\n          {\n            'TodoInfo--completed': todo.completed,\n          },\n        )\n      }\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo: Todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport React, { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n  // if there is no user with a given userId\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nconst maxTodosId = [...todos].sort((a, b) => b.id - a.id)[0].id;\n\nexport const App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [isValidTitle, setIsValidTitle] = useState(true);\n  const [isValidUser, setIsValidUser] = useState(true);\n\n  const makeNewTodo = () => {\n    const newTodo = {\n      id: maxTodosId + 1,\n      title,\n      completed: false,\n      userId,\n      user: getUser(userId),\n    };\n\n    todos.push(newTodo);\n  };\n\n  const handleChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsValidTitle(true);\n  };\n\n  const handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setIsValidUser(true);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!userId) {\n      setIsValidUser(false);\n    }\n\n    if (!title.trim()) {\n      setIsValidTitle(false);\n    }\n\n    if (!userId || !title.trim()) {\n      return;\n    }\n\n    makeNewTodo();\n\n    setUserId(0);\n    setTitle('');\n    setIsValidTitle(true);\n    setIsValidUser(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleChangeInput}\n          />\n          {isValidTitle || <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            defaultValue={userId}\n            value={userId}\n            onChange={handleChangeSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(({ name, id }) => (\n              <option value={id} key={id}>{name}</option>\n            ))}\n          </select>\n\n          {isValidUser || <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}